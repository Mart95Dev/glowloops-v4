/**
 * Service de gestion des sessions d'authentification
 * pour contourner les limitations de Firebase dans certains navigateurs
 */
import { User } from 'firebase/auth';
import { auth } from './firebase-config';

// Cl√© pour stocker les informations de session
const SESSION_KEY = 'glowloops_auth_session';
const LOCAL_STORAGE_KEY = 'glowloops_auth_persistent';

// Dur√©e de validit√© des donn√©es en localStorage (7 jours)
const LOCAL_STORAGE_EXPIRATION = 7 * 24 * 60 * 60 * 1000; // 7 jours en ms

// Interface pour l'objet de session
export interface AuthSession {
  uid: string;
  email: string | null;
  displayName: string | null;
  photoURL: string | null;
  lastAuthenticated: number; // Timestamp
  expiresAt?: number; // Timestamp d'expiration
}

/**
 * Sauvegarde les informations utilisateur dans la session
 */
export function saveUserToSession(user: User): void {
  if (!user) return;
  
  try {
    // Donn√©es de base pour la session
    const sessionData: AuthSession = {
      uid: user.uid,
      email: user.email,
      displayName: user.displayName,
      photoURL: user.photoURL,
      lastAuthenticated: Date.now()
    };
    
    // Sauvegarder dans sessionStorage (dur√©e de la session navigateur)
    sessionStorage.setItem(SESSION_KEY, JSON.stringify(sessionData));
    
    // Pour localStorage, ajouter une date d'expiration
    const persistentData: AuthSession = {
      ...sessionData,
      expiresAt: Date.now() + LOCAL_STORAGE_EXPIRATION
    };
    
    // Sauvegarder dans localStorage (persistant mais avec expiration)
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(persistentData));
    
    console.log("Informations utilisateur sauvegard√©es en session", user.email);
  } catch (error) {
    console.error("Erreur lors de la sauvegarde de la session:", error);
  }
}

/**
 * R√©cup√®re les informations utilisateur de la session
 */
export function getUserFromSession(): AuthSession | null {
  console.log("üîç getUserFromSession - Recherche dans sessionStorage et localStorage...");
  
  try {
    // Essayer d'abord sessionStorage (pr√©f√©r√© car plus s√©curis√©)
    const sessionData = sessionStorage.getItem(SESSION_KEY);
    
    if (sessionData) {
      console.log("‚úÖ getUserFromSession - Donn√©es trouv√©es dans sessionStorage");
      const parsedData = JSON.parse(sessionData) as AuthSession;
      return parsedData;
    }
    
    console.log("‚ÑπÔ∏è getUserFromSession - Rien dans sessionStorage, v√©rification du localStorage...");
    
    // Si rien en sessionStorage, essayer localStorage
    const localData = localStorage.getItem(LOCAL_STORAGE_KEY);
    
    if (localData) {
      console.log("‚úÖ getUserFromSession - Donn√©es trouv√©es dans localStorage");
      const parsedData = JSON.parse(localData) as AuthSession;
      
      // V√©rifier si les donn√©es n'ont pas expir√©
      if (parsedData.expiresAt && Date.now() > parsedData.expiresAt) {
        console.log("‚ö†Ô∏è getUserFromSession - Donn√©es du localStorage expir√©es, suppression...");
        localStorage.removeItem(LOCAL_STORAGE_KEY);
        return null;
      }
      
      console.log("‚úÖ getUserFromSession - Donn√©es localStorage valides, transfert vers sessionStorage");
      // Si valides, transf√©rer dans sessionStorage pour la session en cours
      sessionStorage.setItem(SESSION_KEY, JSON.stringify(parsedData));
      
      return parsedData;
    }
    
    console.log("‚ùå getUserFromSession - Aucune donn√©e trouv√©e");
    return null;
  } catch (error) {
    console.error("‚ùå getUserFromSession - Erreur lors de la r√©cup√©ration:", error);
    return null;
  }
}

/**
 * Efface les donn√©es de session
 */
export function clearSession(): void {
  try {
    sessionStorage.removeItem(SESSION_KEY);
    localStorage.removeItem(LOCAL_STORAGE_KEY);
    console.log("Session utilisateur effac√©e");
  } catch (error) {
    console.error("Erreur lors de la suppression de la session:", error);
  }
}

/**
 * V√©rifie si l'utilisateur est authentifi√© (Firebase ou session)
 */
export function isAuthenticated(): boolean {
  console.log("üîç isAuthenticated - V√©rification...");
  
  // V√©rifier Firebase d'abord
  const currentUser = auth.currentUser;
  if (currentUser) {
    console.log("‚úÖ isAuthenticated - Utilisateur Firebase trouv√©:", currentUser.email);
    // Mettre √† jour la session au passage
    saveUserToSession(currentUser);
    return true;
  }
  
  console.log("‚ÑπÔ∏è isAuthenticated - Pas d'utilisateur Firebase actif, v√©rification des sessions...");
  
  // V√©rifier la session ensuite
  const sessionUser = getUserFromSession();
  
  if (sessionUser) {
    console.log("‚úÖ isAuthenticated - Utilisateur trouv√© en session:", sessionUser.email);
    return true;
  }
  
  console.log("‚ùå isAuthenticated - Aucun utilisateur authentifi√© trouv√©");
  return false;
}

/**
 * Obtient les informations utilisateur (Firebase ou session)
 */
export function getAuthenticatedUser(): User | AuthSession | null {
  console.log("üîç getAuthenticatedUser - R√©cup√©ration...");
  
  // V√©rifier Firebase d'abord
  const currentUser = auth.currentUser;
  if (currentUser) {
    console.log("‚úÖ getAuthenticatedUser - Utilisateur Firebase retourn√©:", currentUser.email);
    return currentUser;
  }
  
  console.log("‚ÑπÔ∏è getAuthenticatedUser - Pas d'utilisateur Firebase, v√©rification des sessions...");
  
  // V√©rifier la session ensuite
  const sessionUser = getUserFromSession();
  
  if (sessionUser) {
    console.log("‚úÖ getAuthenticatedUser - Utilisateur session retourn√©:", sessionUser.email);
    return sessionUser;
  }
  
  console.log("‚ùå getAuthenticatedUser - Aucun utilisateur trouv√©");
  return null;
} 